import os

class DirectorySizeChecker:
    def __init__(self, root_path, size_threshold_bytes, max_level):
        self.root_path = root_path
        self.size_threshold = size_threshold_bytes
        self.max_level = max_level

    def get_dir_size(self, path):
        total_size = 0
        for dirpath, dirnames, filenames in os.walk(path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                if os.path.isfile(fp):
                    total_size += os.path.getsize(fp)
        return total_size

    def check_directory(self, path, current_level):
        if current_level > self.max_level:
            return

        try:
            entries = os.listdir(path)
        except PermissionError:
            print(f"Permission denied: {path}")
            return

        for entry in entries:
            full_path = os.path.join(path, entry)
            if os.path.isdir(full_path):
                dir_size = self.get_dir_size(full_path)
                if dir_size >= self.size_threshold:
                    print(f"{'  ' * current_level}[Level {current_level}] {full_path} - {dir_size / (1024**2):.2f} MB")
                    # Recursively check subdirectories of this one
                    self.check_directory(full_path, current_level + 1)

    def run(self):
        print(f"Checking directories under: {self.root_path}\n")
        self.check_directory(self.root_path, 1)
