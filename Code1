#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <fstream>
#include <vector>
#include <string>

namespace py = pybind11;

std::vector<std::vector<std::string>> load_csv(const std::string &filename) {
    std::ifstream file(filename);
    std::vector<std::vector<std::string>> data;
    std::string line;

    while (std::getline(file, line)) {
        std::vector<std::string> row;
        size_t pos = 0, prev = 0;
        while ((pos = line.find(',', prev)) != std::string::npos) {
            row.push_back(line.substr(prev, pos - prev));
            prev = pos + 1;
        }
        row.push_back(line.substr(prev));
        data.push_back(row);
    }

    return data;
}

void store_csv(const std::string &filename, const std::vector<std::vector<std::string>> &data) {
    std::ofstream file(filename);

    for (const auto &row : data) {
        for (size_t i = 0; i < row.size(); ++i) {
            file << row[i];
            if (i < row.size() - 1)
                file << ",";
        }
        file << "\n";
    }
}

PYBIND11_MODULE(io_module, m) {
    m.def("load_csv", &load_csv, "Read CSV file");
    m.def("store_csv", &store_csv, "Write CSV file");
}



setup file
from setuptools import setup, Extension
from pybind11.setup_helpers import build_ext
import pybind11

ext_modules = [
    Extension(
        'io_module',
        ['io.cpp'],
        include_dirs=[pybind11.get_include()],
        language='c++'
    )
]

setup(
    name='io_module',
    ext_modules=ext_modules,
    cmdclass={'build_ext': build_ext}
)


import io_module
import pandas as pd

# Step 1: Load raw data from CSV using C++
data = io_module.load_csv("input.csv")

# Step 2: Convert to DataFrame for easy processing
df = pd.DataFrame(data[1:], columns=data[0])  # Skip header in data rows

# Step 3: Modify the data (example: add new column)
df["Modified"] = df[df.columns[0]].apply(lambda x: f"{x}_edited")

# Step 4: Convert back to list of lists
header = df.columns.tolist()
data_out = df.values.tolist()
final_data = [header] + data_out

# Step 5: Save the data using C++
io_module.store_csv("output.csv", final_data)

print("âœ… Done: Data loaded by C++, processed in Python, saved by C++")
