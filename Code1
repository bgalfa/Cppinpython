import os

def bytes_to_readable(size_in_bytes):
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size_in_bytes < 1024:
            return f"{size_in_bytes:.2f} {unit}"
        size_in_bytes /= 1024
    return f"{size_in_bytes:.2f} PB"

def get_directory_tree(path, min_size=0, max_level=None, level=0):
    total_size = 0
    tree = {
        "path": path,
        "name": os.path.basename(path) or path,
        "size": 0,
        "children": []
    }

    if max_level is not None and level > max_level:
        return tree, 0

    try:
        for entry in os.scandir(path):
            if entry.is_file(follow_symlinks=False):
                file_size = entry.stat(follow_symlinks=False).st_size
                total_size += file_size
            elif entry.is_dir(follow_symlinks=False):
                subtree, subsize = get_directory_tree(
                    entry.path, min_size, max_level, level + 1
                )
                if subsize >= min_size:
                    tree["children"].append(subtree)
                total_size += subsize
    except PermissionError:
        return tree, 0  # Skip folders we can't access

    tree["size"] = total_size
    return tree, total_size

def format_tree_output(tree, level=0):
    indent = "  " * level
    size_str = bytes_to_readable(tree["size"])
    print(f"{indent}{tree['name']} - {size_str}")
    for child in sorted(tree["children"], key=lambda x: x["size"], reverse=True):
        format_tree_output(child, level + 1)

# ðŸš€ Example Usage:
if __name__ == "__main__":
    root_path = "/path/to/your/directory"
    min_display_size = 100 * 1024 * 1024  # only show directories > 100MB
    max_depth = None  # or set like 4

    directory_tree, total = get_directory_tree(
        root_path,
        min_size=min_display_size,
        max_level=max_depth
    )
    format_tree_output(directory_tree)
